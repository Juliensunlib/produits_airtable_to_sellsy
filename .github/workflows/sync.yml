name: Synchronisation Airtable vers Sellsy

on:
  # Exécution programmée toutes les 6 heures
  schedule:
    - cron: '0 */6 * * *'  # À 00:00, 06:00, 12:00, 18:00 chaque jour
  
  # Permet aussi l'exécution manuelle depuis l'onglet Actions de GitHub
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      # Récupère le code du dépôt
      - name: Checkout du code
        uses: actions/checkout@v3
      
      # Configure Python
      - name: Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      # Installe les dépendances
      - name: Installation des dépendances
        run: pip install -r requirements.txt
      
      # Configure les secrets comme variables d'environnement
      - name: Configuration des variables d'environnement
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}
          SELLSY_CONSUMER_TOKEN: ${{ secrets.SELLSY_CONSUMER_TOKEN }}
          SELLSY_CONSUMER_SECRET: ${{ secrets.SELLSY_CONSUMER_SECRET }}
          SELLSY_USER_TOKEN: ${{ secrets.SELLSY_USER_TOKEN }}
          SELLSY_USER_SECRET: ${{ secrets.SELLSY_USER_SECRET }}
        # Création d'un fichier .env
        run: |
          echo "AIRTABLE_API_KEY=$AIRTABLE_API_KEY" >> .env
          echo "AIRTABLE_BASE_ID=$AIRTABLE_BASE_ID" >> .env
          echo "AIRTABLE_TABLE_NAME=$AIRTABLE_TABLE_NAME" >> .env
          echo "SELLSY_CONSUMER_TOKEN=$SELLSY_CONSUMER_TOKEN" >> .env
          echo "SELLSY_CONSUMER_SECRET=$SELLSY_CONSUMER_SECRET" >> .env
          echo "SELLSY_USER_TOKEN=$SELLSY_USER_TOKEN" >> .env
          echo "SELLSY_USER_SECRET=$SELLSY_USER_SECRET" >> .env
      
      # Exécute le script de synchronisation
      - name: Synchronisation Airtable vers Sellsy
        run: python main.py
      
      # Notification de fin d'exécution (ajout d'informations détaillées)
      - name: Notification de fin
        if: always()
        run: |
          echo "Synchronisation terminée avec statut ${{ job.status }}"
          if [ "${{ job.status }}" != "success" ]; then
            echo "Vérifiez les logs pour plus de détails sur les erreurs"
          fi
